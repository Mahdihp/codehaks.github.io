<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codehaks</title>
    <link>https://codehaks.github.io/</link>
    <description>Recent content on Codehaks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Nov 2018 10:49:41 +0330</lastBuildDate>
    
	<atom:link href="https://codehaks.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Partialview vs Taghelper : A Peroformance Test</title>
      <link>https://codehaks.github.io/2018/11/01/partialview-vs-taghelper--a-peroformance-test.html/</link>
      <pubDate>Thu, 01 Nov 2018 10:49:41 +0330</pubDate>
      
      <guid>https://codehaks.github.io/2018/11/01/partialview-vs-taghelper--a-peroformance-test.html/</guid>
      <description>TagHelper is a new feature in ASP.NET Core. We usually use TagHelpers to generate HTML like tags and compared to the old HtmlHelpers, TagHelpers are a much cleaner approach.
In many cases we can use TagHelpers to replace PartialViews too. of course developing TagHelpers are a lot more difficult and need to put on more time.
In this experiment I try to compare using PartialViews vs TagHelpers performance wise. I&amp;rsquo;m not sure if this is a totally legitimate way to compare in theory, But in practice the code here is what web developer use in a daily basis.</description>
    </item>
    
    <item>
      <title>Injecting LiteDb as a service in ASP.NET Core</title>
      <link>https://codehaks.github.io/2018/10/01/injecting-litedb-as-a-service-in-asp.net-core.html/</link>
      <pubDate>Mon, 01 Oct 2018 13:35:59 +0430</pubDate>
      
      <guid>https://codehaks.github.io/2018/10/01/injecting-litedb-as-a-service-in-asp.net-core.html/</guid>
      <description>Intoduction LiteDB is a simple, fast and lightweight embedded .NET document database. LiteDB was inspired by the MongoDB database and its API is very similar to MongoDB&amp;rsquo;s official .NET API.
Situation I have been using LiteDb for some of my smaller projects and I&amp;rsquo;ve got to tell you that so far it has beed satisfying. But my problem was injecting LiteDb as a service inside ASP.NET Core applications. Usually in ASP.</description>
    </item>
    
    <item>
      <title>How to work with Action Filters in ASP Core</title>
      <link>https://codehaks.github.io/2018/04/18/how-to-work-with-action-filters-in-asp-core.html/</link>
      <pubDate>Wed, 18 Apr 2018 11:10:14 +0430</pubDate>
      
      <guid>https://codehaks.github.io/2018/04/18/how-to-work-with-action-filters-in-asp-core.html/</guid>
      <description>Every time you need to store some data in database you have to validate it first. we usually need to create an if/else block and make sure ModelState is valid and send back some error messages if it&amp;rsquo;s not.
ActionFilters are a great way to implement the DRY principle. Here we are going to create a simple ActionFilter to do the Model Validation before getting into the Action.
The code goes like this :</description>
    </item>
    
    <item>
      <title>Configurations in ASP.NET Core 2.0</title>
      <link>https://codehaks.github.io/2017/10/03/configurations-in-asp.net-core-2.0.html/</link>
      <pubDate>Tue, 03 Oct 2017 13:55:57 +0430</pubDate>
      
      <guid>https://codehaks.github.io/2017/10/03/configurations-in-asp.net-core-2.0.html/</guid>
      <description>With new version of ASP.NET Core configuration system has changed a lot. First it is now inject able into the framework. then you can add custom options to the base Configuration class and access it anywhere needed.
In this post I&amp;rsquo;m going to list all available configurations in ASP.NET Core 2.0 . and to do that I started by injecting configuration using a constructor.
public class Startup { public IConfiguration Configuration { get; } public Startup(IConfiguration config) { Configuration=config; } }  From now on we can use Configuration anywhere in the Startup class.</description>
    </item>
    
    <item>
      <title>Error Handling With ASP.NET Core</title>
      <link>https://codehaks.github.io/2017/09/15/error-handling-with-asp.net-core.html/</link>
      <pubDate>Fri, 15 Sep 2017 13:52:15 +0430</pubDate>
      
      <guid>https://codehaks.github.io/2017/09/15/error-handling-with-asp.net-core.html/</guid>
      <description>Error handling is real and it&amp;rsquo;s serious. In ASP.NET Core it&amp;rsquo;s much more easier to handle errors. in this post I&amp;rsquo;m digging into error handling and trying to get some errors !
Middlewares Like many other features in ASP.NET Core, Error handling is done through Middlewares, there is UseDeveloperExceptionPage() and UseExceptionHandler() to start with. The first one is used to show detailed error information for developers and the second is to redirect users to error page when something goes wrong.</description>
    </item>
    
    <item>
      <title>A Vuejs CRUD Project With ASP NET Core</title>
      <link>https://codehaks.github.io/2017/09/12/a-vuejs-crud-project-with-asp-net-core.html/</link>
      <pubDate>Tue, 12 Sep 2017 13:42:34 +0430</pubDate>
      
      <guid>https://codehaks.github.io/2017/09/12/a-vuejs-crud-project-with-asp-net-core.html/</guid>
      <description>I enjoy working with Vue.js. It&amp;rsquo;s just a good SPA framework, it has everything I like about a javaScript framework. Today I created a sample project with Vue.js and ASP.NET Core MVC 2.0 that has all CRUD operations. I want to share the code here.
Project BugVue This is a simple app for tracking bugs. You can Create, Read, Update and Delete the in UI and it all happens in the same view thanks to Vue.</description>
    </item>
    
    <item>
      <title>Exploring in Line Middlewares</title>
      <link>https://codehaks.github.io/2017/09/07/exploring-in-line-middlewares.html/</link>
      <pubDate>Thu, 07 Sep 2017 13:35:59 +0430</pubDate>
      
      <guid>https://codehaks.github.io/2017/09/07/exploring-in-line-middlewares.html/</guid>
      <description>In-line middlewares are a simple way to add functionality to ASP.NET Core pipeline without going through a ceremony. In this post I&amp;rsquo;m playing with app.Run and app.Use and see how these two work.
Simplest middleware possible The best way to understand how a middleware works is to remove the noise around it. so, this is the simplest middleware you can build in ASP.NET Core 2.0.
app.Run(async (context) =&amp;gt; { await context.</description>
    </item>
    
    <item>
      <title>How to Create Middleware in ASP Core</title>
      <link>https://codehaks.github.io/2017/09/04/how-to-create-middleware-in-asp-core.html/</link>
      <pubDate>Mon, 04 Sep 2017 13:25:00 +0430</pubDate>
      
      <guid>https://codehaks.github.io/2017/09/04/how-to-create-middleware-in-asp-core.html/</guid>
      <description>One of the best features of ASP.NET Core is it&amp;rsquo;s flexible pipeline. You can control what goes into your application&amp;rsquo;s pipeline and add more to it using a Middleware.
SendFile Middleware This middleware is just a sample project to see how middlewares are created in ASP.NET Core. I tried to keep it is simple as possible,after all this is my first middleware.
What it does? You set a file path at startup and SendFile Middleware sends the file back to user in browser.</description>
    </item>
    
    <item>
      <title>Bare Minimum Hello World</title>
      <link>https://codehaks.github.io/2017/08/31/bare-minimum-hello-world.html/</link>
      <pubDate>Thu, 31 Aug 2017 13:02:05 +0430</pubDate>
      
      <guid>https://codehaks.github.io/2017/08/31/bare-minimum-hello-world.html/</guid>
      <description>In this post I&amp;rsquo;m exploring what is the bare minimum necessary code to show &amp;ldquo;Hello World!&amp;rdquo; in an ASP.NET Core 2.0 Application. bear with me!
The template To get the bare minimum in the first place you need to create a project using &amp;ldquo;ASP.NET Core Empty&amp;rdquo; template.
Program.cs The most important part that you have to change here is the CreateDefaultBuilder Method.There are so many parts that you don&amp;rsquo;t need, Like settings a Logging.</description>
    </item>
    
    <item>
      <title>First 3 Days With ASP Core 20</title>
      <link>https://codehaks.github.io/2017/08/19/first-3-days-with-asp-core-20.html/</link>
      <pubDate>Sat, 19 Aug 2017 13:59:04 +0430</pubDate>
      
      <guid>https://codehaks.github.io/2017/08/19/first-3-days-with-asp-core-20.html/</guid>
      <description>About 3 days ago the final version of ASP Core 2.0 released. I installed the new bits and have been playing with it since. here is my experience so far. Fantastic.
No bugs So far I experienced no bugs. Everything works perfectly. No compatibility issues like the previews version and no errors. Its fast and reliable.
.Net Standard 2.0 Its really the best part of the new version. it feels more matured than the last version.</description>
    </item>
    
  </channel>
</rss>